// <auto-generated />
using System;
using BE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE.Migrations
{
    [DbContext(typeof(CourseOnlContext))]
    [Migration("20240613084539_Database")]
    partial class Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BE.Models.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("CommissionPercent")
                        .HasColumnType("float")
                        .HasColumnName("commissionPercent");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<int?>("CreateAt")
                        .HasColumnType("int")
                        .HasColumnName("createAt");

                    b.Property<string>("CreateBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("createBy");

                    b.Property<float?>("TotalCommission")
                        .HasColumnType("float")
                        .HasColumnName("totalCommission");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId");

                    b.HasIndex(new[] { "CreateBy", "CourseId" }, "unique_user_course")
                        .IsUnique();

                    b.ToTable("Affiliate", (string)null);
                });

            modelBuilder.Entity("BE.Models.Answear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("questionId");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuestionId" }, "questionId");

                    b.ToTable("Answear", (string)null);
                });

            modelBuilder.Entity("BE.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<float?>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaymentId" }, "paymentId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "userId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("BE.Models.CartCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AffiliateId")
                        .HasColumnType("int")
                        .HasColumnName("affiliateId");

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<float?>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AffiliateId" }, "affiliateId");

                    b.HasIndex(new[] { "CartId" }, "cartId");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId1");

                    b.ToTable("CartCourse", (string)null);
                });

            modelBuilder.Entity("BE.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BE.Models.CategoryCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "categoryId");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId2");

                    b.ToTable("CategoryCourse", (string)null);
                });

            modelBuilder.Entity("BE.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .IsUnique()
                        .HasDatabaseName("courseId3");

                    b.ToTable("Certification", (string)null);
                });

            modelBuilder.Entity("BE.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId4");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("BE.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment1")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comment");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isVisible");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId5");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId1");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BE.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isVisible");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ownerId");

                    b.Property<float?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<float?>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OwnerId" }, "ownerId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("BE.Models.EnrollCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId6");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId2");

                    b.ToTable("EnrollCourse", (string)null);
                });

            modelBuilder.Entity("BE.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId3");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BE.Models.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FollowedId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("followedId");

                    b.Property<string>("FollowerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("followerId");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FollowedId" }, "followedId");

                    b.HasIndex(new[] { "FollowerId" }, "followerId");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("BE.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Base64Code")
                        .HasColumnType("mediumtext")
                        .HasColumnName("base64Code");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("lectureId");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId7");

                    b.HasIndex(new[] { "FeedbackId" }, "feedbackId");

                    b.HasIndex(new[] { "LectureId" }, "lectureId");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId4");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("BE.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapterId");

                    b.Property<DateTime?>("CreatAt")
                        .HasColumnType("datetime")
                        .HasColumnName("creatAt");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<TimeOnly?>("TimeVideo")
                        .HasColumnType("time")
                        .HasColumnName("timeVideo");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("videoUrl");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChapterId" }, "chapterId");

                    b.ToTable("Lecture", (string)null);
                });

            modelBuilder.Entity("BE.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateUp")
                        .HasColumnType("datetime")
                        .HasColumnName("dateUp");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isRead");

                    b.Property<string>("ReceivedId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("receivedId");

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("senderId");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ReceivedId" }, "receivedId");

                    b.HasIndex(new[] { "SenderId" }, "senderId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BE.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("PaymendCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("paymendCode");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("paymentMethod");

                    b.Property<float?>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BE.Models.Permisson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Create")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("create");

                    b.Property<bool?>("Delete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("delete");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdate");

                    b.Property<int?>("ResourcesId")
                        .HasColumnType("int")
                        .HasColumnName("resourcesId");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<bool?>("Update")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("update");

                    b.Property<bool?>("View")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("view");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ResourcesId" }, "resourcesId");

                    b.HasIndex(new[] { "RoleId" }, "roleId");

                    b.ToTable("Permisson", (string)null);
                });

            modelBuilder.Entity("BE.Models.Processing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("lectureId");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quizId");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LectureId" }, "lectureId")
                        .HasDatabaseName("lectureId1");

                    b.HasIndex(new[] { "QuizId" }, "quizId");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId5");

                    b.ToTable("Processing", (string)null);
                });

            modelBuilder.Entity("BE.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("Mark")
                        .HasColumnType("int")
                        .HasColumnName("mark");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quizId");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("text");

                    b.Property<bool?>("Type")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuizId" }, "quizId")
                        .HasDatabaseName("quizId1");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("BE.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("chapterId");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfQuestions")
                        .HasColumnType("int")
                        .HasColumnName("numberOfQuestions");

                    b.Property<int?>("PassPercent")
                        .HasColumnType("int")
                        .HasColumnName("passPercent");

                    b.Property<int?>("TotalMark")
                        .HasColumnType("int")
                        .HasColumnName("totalMark");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChapterId" }, "chapterId")
                        .HasDatabaseName("chapterId1");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("BE.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("message");

                    b.Property<string>("ReportedUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reportedUserId");

                    b.Property<string>("ReporterId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reporterId");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CommentId" }, "commentId");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId8");

                    b.HasIndex(new[] { "ReportedUserId" }, "reportedUserId");

                    b.HasIndex(new[] { "ReporterId" }, "reporterId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("BE.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("BE.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BE.Models.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "roleId")
                        .HasDatabaseName("roleId1");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId6");

                    b.ToTable("RoleUser", (string)null);
                });

            modelBuilder.Entity("BE.Models.SaveCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseId");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "courseId")
                        .HasDatabaseName("courseId9");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId7");

                    b.ToTable("SaveCourse", (string)null);
                });

            modelBuilder.Entity("BE.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<double?>("Grade")
                        .HasColumnType("double")
                        .HasColumnName("grade");

                    b.Property<int?>("QuizzId")
                        .HasColumnType("int")
                        .HasColumnName("quizzId");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuizzId" }, "quizzId");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId8");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("BE.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isVisible");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BE.Models.UserCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CertificationId")
                        .HasColumnType("int")
                        .HasColumnName("certificationId");

                    b.Property<DateTime?>("DatePass")
                        .HasColumnType("datetime")
                        .HasColumnName("datePass");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CertificationId" }, "certificationId");

                    b.HasIndex(new[] { "UserId" }, "userId")
                        .HasDatabaseName("userId9");

                    b.ToTable("UserCertification", (string)null);
                });

            modelBuilder.Entity("BE.Models.Affiliate", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("Affiliates")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("Affiliate_ibfk_2");

                    b.HasOne("BE.Models.User", "CreateByNavigation")
                        .WithMany("Affiliates")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("Affiliate_ibfk_1");

                    b.Navigation("Course");

                    b.Navigation("CreateByNavigation");
                });

            modelBuilder.Entity("BE.Models.Answear", b =>
                {
                    b.HasOne("BE.Models.Question", "Question")
                        .WithMany("Answears")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("Answear_ibfk_1");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BE.Models.Cart", b =>
                {
                    b.HasOne("BE.Models.Payment", "Payment")
                        .WithOne("Cart")
                        .HasForeignKey("BE.Models.Cart", "PaymentId")
                        .HasConstraintName("Cart_ibfk_2");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Cart_ibfk_1");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.CartCourse", b =>
                {
                    b.HasOne("BE.Models.Affiliate", "Affiliate")
                        .WithMany("CartCourses")
                        .HasForeignKey("AffiliateId")
                        .HasConstraintName("CartCourse_ibfk_3");

                    b.HasOne("BE.Models.Cart", "Cart")
                        .WithMany("CartCourses")
                        .HasForeignKey("CartId")
                        .HasConstraintName("CartCourse_ibfk_1");

                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("CartCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("CartCourse_ibfk_2");

                    b.Navigation("Affiliate");

                    b.Navigation("Cart");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BE.Models.CategoryCourse", b =>
                {
                    b.HasOne("BE.Models.Category", "Category")
                        .WithMany("CategoryCourses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("CategoryCourse_ibfk_2");

                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("CategoryCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("CategoryCourse_ibfk_1");

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BE.Models.Certification", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithOne("Certification")
                        .HasForeignKey("BE.Models.Certification", "CourseId")
                        .HasConstraintName("Certification_ibfk_1");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BE.Models.Chapter", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("Chapter_ibfk_1");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BE.Models.Comment", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("Comment_ibfk_1");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Comment_ibfk_2");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Course", b =>
                {
                    b.HasOne("BE.Models.User", "Owner")
                        .WithMany("Courses")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("Course_ibfk_1");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BE.Models.EnrollCourse", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("EnrollCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("EnrollCourse_ibfk_2");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("EnrollCourses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("EnrollCourse_ibfk_1");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Feedback", b =>
                {
                    b.HasOne("BE.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Feedback_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Follow", b =>
                {
                    b.HasOne("BE.Models.User", "Followed")
                        .WithMany("FollowFolloweds")
                        .HasForeignKey("FollowedId")
                        .HasConstraintName("Follow_ibfk_2");

                    b.HasOne("BE.Models.User", "Follower")
                        .WithMany("FollowFollowers")
                        .HasForeignKey("FollowerId")
                        .HasConstraintName("Follow_ibfk_1");

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("BE.Models.Image", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("Images")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("Image_ibfk_2");

                    b.HasOne("BE.Models.Feedback", "Feedback")
                        .WithMany("Images")
                        .HasForeignKey("FeedbackId")
                        .HasConstraintName("Image_ibfk_4");

                    b.HasOne("BE.Models.Lecture", "Lecture")
                        .WithMany("Images")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("Image_ibfk_3");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Image_ibfk_1");

                    b.Navigation("Course");

                    b.Navigation("Feedback");

                    b.Navigation("Lecture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Lecture", b =>
                {
                    b.HasOne("BE.Models.Chapter", "Chapter")
                        .WithMany("Lectures")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("Lecture_ibfk_1");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("BE.Models.Notification", b =>
                {
                    b.HasOne("BE.Models.User", "Received")
                        .WithMany("NotificationReceiveds")
                        .HasForeignKey("ReceivedId")
                        .HasConstraintName("Notification_ibfk_2");

                    b.HasOne("BE.Models.User", "Sender")
                        .WithMany("NotificationSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("Notification_ibfk_1");

                    b.Navigation("Received");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BE.Models.Permisson", b =>
                {
                    b.HasOne("BE.Models.Resource", "Resources")
                        .WithMany("Permissons")
                        .HasForeignKey("ResourcesId")
                        .HasConstraintName("Permisson_ibfk_2");

                    b.HasOne("BE.Models.Role", "Role")
                        .WithMany("Permissons")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("Permisson_ibfk_1");

                    b.Navigation("Resources");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BE.Models.Processing", b =>
                {
                    b.HasOne("BE.Models.Lecture", "Lecture")
                        .WithMany("Processings")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("Processing_ibfk_2");

                    b.HasOne("BE.Models.Quiz", "Quiz")
                        .WithMany("Processings")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("Processing_ibfk_3");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("Processings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Processing_ibfk_1");

                    b.Navigation("Lecture");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Question", b =>
                {
                    b.HasOne("BE.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("Question_ibfk_1");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BE.Models.Quiz", b =>
                {
                    b.HasOne("BE.Models.Chapter", "Chapter")
                        .WithMany("Quizzes")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("Quiz_ibfk_1");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("BE.Models.Report", b =>
                {
                    b.HasOne("BE.Models.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("Report_ibfk_2");

                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("Reports")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("Report_ibfk_3");

                    b.HasOne("BE.Models.User", "ReportedUser")
                        .WithMany("ReportReportedUsers")
                        .HasForeignKey("ReportedUserId")
                        .HasConstraintName("Report_ibfk_1");

                    b.HasOne("BE.Models.User", "Reporter")
                        .WithMany("ReportReporters")
                        .HasForeignKey("ReporterId")
                        .HasConstraintName("Report_ibfk_4");

                    b.Navigation("Comment");

                    b.Navigation("Course");

                    b.Navigation("ReportedUser");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("BE.Models.RoleUser", b =>
                {
                    b.HasOne("BE.Models.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("RoleUser_ibfk_1");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("RoleUser_ibfk_2");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.SaveCourse", b =>
                {
                    b.HasOne("BE.Models.Course", "Course")
                        .WithMany("SaveCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("SaveCourse_ibfk_2");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("SaveCourses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("SaveCourse_ibfk_1");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Submission", b =>
                {
                    b.HasOne("BE.Models.Quiz", "Quizz")
                        .WithMany("Submissions")
                        .HasForeignKey("QuizzId")
                        .HasConstraintName("Submission_ibfk_1");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Submission_ibfk_2");

                    b.Navigation("Quizz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.UserCertification", b =>
                {
                    b.HasOne("BE.Models.Certification", "Certification")
                        .WithMany("UserCertifications")
                        .HasForeignKey("CertificationId")
                        .HasConstraintName("UserCertification_ibfk_1");

                    b.HasOne("BE.Models.User", "User")
                        .WithMany("UserCertifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserCertification_ibfk_2");

                    b.Navigation("Certification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE.Models.Affiliate", b =>
                {
                    b.Navigation("CartCourses");
                });

            modelBuilder.Entity("BE.Models.Cart", b =>
                {
                    b.Navigation("CartCourses");
                });

            modelBuilder.Entity("BE.Models.Category", b =>
                {
                    b.Navigation("CategoryCourses");
                });

            modelBuilder.Entity("BE.Models.Certification", b =>
                {
                    b.Navigation("UserCertifications");
                });

            modelBuilder.Entity("BE.Models.Chapter", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("BE.Models.Comment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BE.Models.Course", b =>
                {
                    b.Navigation("Affiliates");

                    b.Navigation("CartCourses");

                    b.Navigation("CategoryCourses");

                    b.Navigation("Certification");

                    b.Navigation("Chapters");

                    b.Navigation("Comments");

                    b.Navigation("EnrollCourses");

                    b.Navigation("Images");

                    b.Navigation("Reports");

                    b.Navigation("SaveCourses");
                });

            modelBuilder.Entity("BE.Models.Feedback", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("BE.Models.Lecture", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Processings");
                });

            modelBuilder.Entity("BE.Models.Payment", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("BE.Models.Question", b =>
                {
                    b.Navigation("Answears");
                });

            modelBuilder.Entity("BE.Models.Quiz", b =>
                {
                    b.Navigation("Processings");

                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("BE.Models.Resource", b =>
                {
                    b.Navigation("Permissons");
                });

            modelBuilder.Entity("BE.Models.Role", b =>
                {
                    b.Navigation("Permissons");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("BE.Models.User", b =>
                {
                    b.Navigation("Affiliates");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Courses");

                    b.Navigation("EnrollCourses");

                    b.Navigation("Feedbacks");

                    b.Navigation("FollowFolloweds");

                    b.Navigation("FollowFollowers");

                    b.Navigation("Images");

                    b.Navigation("NotificationReceiveds");

                    b.Navigation("NotificationSenders");

                    b.Navigation("Processings");

                    b.Navigation("ReportReportedUsers");

                    b.Navigation("ReportReporters");

                    b.Navigation("RoleUsers");

                    b.Navigation("SaveCourses");

                    b.Navigation("Submissions");

                    b.Navigation("UserCertifications");
                });
#pragma warning restore 612, 618
        }
    }
}
